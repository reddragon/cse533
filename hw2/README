Group Members:
[1] Gaurav Menghani
[2] Dhruv Matani

Notes:
------

[1] Before every line, we print something like:
INFO[5498:73423] ....

This means that the PID of the proces printing this data is '5498' and
the time at which the line was printed was 73423ms since the process
was started.

[2] When the client is done (receives the FIN packet from the server),
it enters the TIME_WAIT state, and prints the line:
'Entering the TIME_WAIT state'

This line might be followed by lines that contain the text data of the
file, so scrolling up a bit (specifically up to RWIN # of packets)
will reveal that line when the transmission has completed.

[3] The functions perhaps_send() and perhaps_recv() are the ones that
probabilistically drop packets before send and after receiving them.

[4] For congestion control we remember that in class, you mentioned
that:
  (a) ssthresh should be equal to ssthresh/2, but the documentation
  says it should be cwnd/2. So, we are sticking with what you mentioned
  in class.

  (b) In our implementation the value of sshthresh can reach 0. However
  the documentation says we should bound it to at least 2. 

Tasks:
------

[1] The code in section 22.6 does not provide the network masks for each
of the interface addresses. This problem is resolved by the using the 
get_ifi_info_plus() method which was provided to us.

[2] To bind to only the Unicast addresses, we had to bind to just the
addresses in the ifi_addr field.

[3] We implemented the following ARQ mechanisms:
    [a] RTT based RTO update on the server
    [b] ACK timeout based re-transmit on the server
    [c] Duplicate ACK based re-transmit (Fast-retransmit) on the server
    [d] Re-transmission of initial SYN packet from the client
    [e] TIME_WAIT state in the client (waits for 60 sec)
    [f] Fast Recovery on the server
    [g] Slow Start (cwnd & ssthresh) on the server
    [h] Congestion Avoidance (cwnd & ssthresh) on the server
    [i] Window advertisements by the client

[4] When the first packet sent by the server containing the port
number (destined for the client) is dropped by the client, the client
re-transmits the request packet with the file name, and the server
detects this and does NOT spawn off a new server-child process to
handle this request, which is basically a re-transmission.

[5] The sender notifies the receiver about the last datagram using a
FIN packet. The receiver sends an ACK to this packet and enters the
TIME_WAIT state, where it remains for the next 60 sec, responsing to
FIN packets sent by the server in case the server missed the ACK sent
to the original FIN packet by the client.


